{"Asset":{"wkuokg1sw5ndwkzn":{"_id":"wkuokg1sw5ndwkzn","source":"themes/light-sunnyxx/source/fancybox/blank.gif","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/blank.gif","path":"fancybox/blank.gif"},"q3sgeujiiz0s06u6":{"_id":"q3sgeujiiz0s06u6","source":"themes/light-sunnyxx/source/fancybox/fancybox_loading.gif","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif"},"z4y58n9g6a8q4jb0":{"_id":"z4y58n9g6a8q4jb0","source":"themes/light-sunnyxx/source/fancybox/fancybox_loading@2x.gif","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif"},"97d1pgnudv0tq0ie":{"_id":"97d1pgnudv0tq0ie","source":"themes/light-sunnyxx/source/fancybox/fancybox_overlay.png","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png"},"ypybsqxm1rd457aq":{"_id":"ypybsqxm1rd457aq","source":"themes/light-sunnyxx/source/fancybox/fancybox_sprite.png","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png"},"nrojl742nt3a4yvl":{"_id":"nrojl742nt3a4yvl","source":"themes/light-sunnyxx/source/fancybox/fancybox_sprite@2x.png","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png"},"icvomt2fzn490q25":{"_id":"icvomt2fzn490q25","source":"themes/light-sunnyxx/source/fancybox/jquery.fancybox.css","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css"},"wgqf59ndwigl815n":{"_id":"wgqf59ndwigl815n","source":"themes/light-sunnyxx/source/fancybox/jquery.fancybox.pack.js","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js"},"c24pg23p1tguk2g3":{"_id":"c24pg23p1tguk2g3","source":"themes/light-sunnyxx/source/js/gallery.js","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/js/gallery.js","path":"js/gallery.js"},"7b2sqse8lz08lrz1":{"_id":"7b2sqse8lz08lrz1","source":"themes/light-sunnyxx/source/js/jquery.imagesloaded.min.js","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js"},"90y6n6lcbwsznk90":{"_id":"90y6n6lcbwsznk90","source":"themes/light-sunnyxx/source/css/style.styl","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/css/style.styl","path":"css/style.styl"},"g21csiaysvgpzi4u":{"_id":"g21csiaysvgpzi4u","source":"themes/light-sunnyxx/source/css/font/fontawesome-webfont.eot","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot"},"k0qf55es44sb9vpk":{"_id":"k0qf55es44sb9vpk","source":"themes/light-sunnyxx/source/css/font/fontawesome-webfont.svg","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg"},"jvlxpfyrp64txjyg":{"_id":"jvlxpfyrp64txjyg","source":"themes/light-sunnyxx/source/css/font/fontawesome-webfont.ttf","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf"},"il17d85ws9syfcrg":{"_id":"il17d85ws9syfcrg","source":"themes/light-sunnyxx/source/css/font/fontawesome-webfont.woff","mtime":1393582965000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/themes/light-sunnyxx/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff"},"dt1qft9jsp5hp8it":{"_id":"dt1qft9jsp5hp8it","source":"source/CNAME","mtime":1393488428000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/source/CNAME","path":"CNAME"},"xvrr231c71aub9d4":{"_id":"xvrr231c71aub9d4","source":"source/favicon.ico","mtime":1394012192000,"modified":false,"full_source":"/Users/yuan.sun/git/blog-hexo-source/source/favicon.ico","path":"favicon.ico"}},"Cache":{"vo3y3w2h3uwhbx48":{"_id":"vo3y3w2h3uwhbx48","content":"title: 使用hexo搭建blog边做边记\ndate: 2014-02-27 14:56:47\ntags: hexo\n---\n\n#Install\n**安装nvm（Node Version Manager）**，Terminal中运行\n\n    $ curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n会提示：\n\n    => Close and reopen your terminal to start using NVM\n退出Terminal重启后nvm命令才能生效。  使用nvm安装node.js：\n\n    $ nvm install 0.10\n下完后安装hexo，这一步时间比较长：\n\n    $ npm install -g hexo\n\n然后找个文件初始化blog：\n\n    $ cd ~/git/blog  \n    $ hexo init .\n    $ ls\n生成出的目录结构：\n\n    .\n    ├── _config.yml\n    ├── package.json\n    ├── scaffolds\n    ├── scripts\n    ├── source\n    |   ├── _drafts\n    |   └── _posts\n    └── themes\n\n新建一篇文章：\n\n    $ hexo new mac下使用hexo搭建blog\n$ open source/_posts/mac下使用hexo搭建blog.md \n编辑md后生成html：\n\n    $ hexo generate\n本地预览：\n\n    $ hexo server\n    => [info] Hexo is running at localhost:4000/. Press Ctrl+C to stop.\nTheme，去官方提供的[主题列表][1]中选个现成的，按照里面的方法pull下来，如light主题\n\n\n    $ git clone git://github.com/tommy351/hexo-theme-light.git themes/light\n    \n_config.yml配置文件中设置：\n\n    theme: light\n重新generate和server预览，就看到变化了。\n\n##deploy\n\ngithub上建个respository，设置里设一下\n在`_config.yml`中：\n``` yml\ndeploy:\ntype: github\nrepository: https://github.com/sunnyxx/blog-hexo.git\n```\n然后执行：\n\n    $ hexo deploy\n就行了，github会多一个branch，比octopress简单\n\n##绑定域名\n去万网买了这个域名`sunnyxx.com`，以`blog.sunnyxx.com`作为博客的域名，\n看万网是阿里的才从那儿买的，后来发现`DNSPod`貌似比较好，万网的后台做的那叫一个*，但愿解析速度上别再不行就行。\n托管在github上，首先建一个CNAME文件，里面写`最终指向`的域名：\n``` bash\n$ blog.sunnyxx.com > public/CNAME\n```\n然后去域名后台配置下，由于github表示说我托管的页面的域名是：`sunnyxx.github.io`\n所以建一个CNAME记录，将`blog.sunnyxx.com`解析到`sunnyxx.github.io`\nDNS域名解析最常用的是**A记录**和**CNAME记录**，A记录把域名解析到服务器IP，CNAME相当于把一个域名指向另一个域名，因此我这个用的是CNAME，要是托管的服务器也是自己搭的那就用A记录了。\n完事之后得等一段时间（DNSPod说几秒内就同步完，要是这样真心是它好）\n使用下面的命令测一下域名的解析\n``` bash\n$ dig blog.sunnyxx.com +nostats +nocomments +nocmd\n\n=> output:\n;; global options: +cmd\n;blog.sunnyxx.com.      IN  A\nblog.sunnyxx.com.   1778    IN  CNAME   sunnyxx.github.io.\nsunnyxx.github.io.  1778    IN  CNAME   github.map.fastly.net.\ngithub.map.fastly.net.  30  IN  A   103.245.222.133\n```\n这说明是成功了，发现解析过程是`blog.sunnyxx.com`->`sunnyxx.github.io`->`github.map.fastly.net`->`103.245.222.133` 最终指向了github的web server\n由于国内GreatWall，解析速度明显不稳定，有时候都连不上，以后再看怎么办吧\n\n##添加sitemap\n同样的，我们使用hexo提供的插件，方法与添加RSS类似。\n安装sitemap到本地：\n```\nnpm install hexo-generator-sitemap\n```\n开启sitemap功能：编辑hexo/_config.yml，添加如下代码：\n```\nplugins:\n- hexo-generator-sitemap\n```\n访问zipperary/sitemap.xml即可看到站点地图。不过，sitemap的初衷是给搜索引擎看的，为了提高搜索引擎对自己站点的收录效果，我们最好手动到google和百度等搜索引擎提交sitemap.xml。\n\n\n\n##文章中插入图片\n\n原来用octopress写的时候在目录下面建个`images`目录来保存图片，引用时使用了相对路径就行了，但这是让我最蛋疼的事，想发个图片还得命个名，然后`mv`过去，再引进来，特别墨迹。hexo中当然也可以用这种方法，但是发现使用个`图床`来搞定图片真是一劳永逸了。\n\n\n**微博图床**，地址http://weibotuchuang.sinaapp.com/，我是chrome用户，所以下了个他的插件，装完了点开发现直接把图片拖进去就行了：\n![enter image description here][3]\n生成的地址直接用就行了\n有时候需要使用QQ截屏，只要随便截到某个人的聊天窗口里面，不用发送，然后直接拖拽到这个小窗口里面就OK了。\n> Life saver.\n\nPS：gif也没问题\n![1231231][2]\n##StackEdit - 超赞的Markdown在线编辑器  \n\n<img src=\"http://ww2.sinaimg.cn/large/51530583gw1ee1a7efwa0j20hk03kwen.jpg\" width=\"500px\" />\n\n界面干净，所见即所得，支持同步到`Dropbox`和`github`，这个特别好，比如在公司写了点东西就可以一键同步，保留犯罪现场，回来之后继续写剩下的。\n\n遇到的问题\n-----\n第二次用的时候发现安装的hexo命令找不到了，重新use一下：\n```\n$ nvm use 0.10\n```\n\n**使用StackEdit时改变图片大小**\n\n```\n<img src=\"http://ww2.sinaimg.cn/large/51530583gw1ee1a7efwa0j20hk03kwen.jpg\" width=\"200px align=\"center\" />\n```\n效果：\n  <img src=\"http://ww2.sinaimg.cn/large/51530583gw1ee1a7efwa0j20hk03kwen.jpg\" width=\"200px\" />\n\n\n  [1]: https://github.com/tommy351/hexo/wiki/Themes\n  [2]: http://ww2.sinaimg.cn/large/51530583gw1ee17y3p11zg207804lnhh.gif\n  [3]: http://ww2.sinaimg.cn/large/51530583gw1ee18d6ak6yj208c08ydg6.jpg\n  [4]: https://stackedit.io/res-min/img/logo-promo-128.png ","mtime":1394012192000,"source":"_posts/mac下使用hexo搭建blog.md"},"wtz2gxts3rn3fq20":{"_id":"wtz2gxts3rn3fq20","content":"layout: objc\ntitle: objc category的秘密\ndate: 2014-03-05 17:37:19\ntags:\n---\n\nPosted by `sunnyxx` in http://blog.sunnyxx.com\n\n###category的真面目\nobjc所有类和对象都是c结构体，category当然也一样，下面是`runtime`中category的结构：\n``` objc\nstruct _category_t {\n\tconst char *name; // 1\n\tstruct _class_t *cls; // 2\n\tconst struct _method_list_t *instance_methods; // 3\n\tconst struct _method_list_t *class_methods; // 4\n\tconst struct _protocol_list_t *protocols; // 5\n\tconst struct _prop_list_t *properties; // 6\n};\n```\n\n 1. `name`注意，并不是category小括号里写的名字，而是类的名字\n 2. `cls`要扩展的类对象，编译期间这个值是不会有的，在app被runtime加载时才会根据`name`对应到类对象\n 3. `instance_methods`这个category所有的`-`方法\n 4. `class_methods`这个category所有的`+`方法\n 5. `protocols`这个category实现的protocol，比较不常用在category里面实现协议，但是确实支持的\n 6. `properties`这个category所有的property，这也是category里面可以定义属性的原因，不过这个property不会`@synthesize`实例变量，一般有需求添加实例变量属性时会采用`objc_setAssociatedObject`和`objc_getAssociatedObject`方法绑定方法绑定，不过这种方法生成的与一个普通的实例变量完全是两码事。\n\n###编译器，你对category干了什么？\n\n举个栗子看，定义下面一个类和它的category，实现忽略，保存为`sark.h`和`sark.m`\n``` objc\n@interface Sark : NSObject\n- (void)speak;\n@end\n\n@interface Sark (GayExtention)\n- (void)burst;\n@end\n```\n请出clang的重写命令：\n``` bash\n$ clang -rewrite-objc sark.m\n```\n同级目录下会生成`sark.cpp`，这就是`objc`代码重写成`c++`(基本就是c)的实现。\n打开生成的文件，发现茫茫多，排除include进来的header，自己的代码都在文件尾部了，看看上面的category被编译器搞成什么样子了：\n``` c\nstatic struct _category_t _OBJC_$_CATEGORY_Sark_$_GayExtention __attribute__ ((used, section (\"__DATA,__objc_const\"))) = \n{\n\t\"Sark\",\n\t0, // &OBJC_CLASS_$_Sark,\n\t(const struct _method_list_t *)&_OBJC_$_CATEGORY_INSTANCE_METHODS_Sark_$_GayExtention,\n\t0,\n\t0,\n\t0,\n};\n```\n先注意这个category的名字`_OBJC_$_CATEGORY_Sark_$_GayExtention`，这是一个按规则生成的符号了，中间的`Sark`是类名，后面的`GayExtention`是类别的名字，这也就是为什么**同一个类的category名不能冲突**了  \n\n对应看上面`_category_t`的定义，因为category里面只添加了一个`- burst`方法，所以只有实例方法那一项被填充了值`_OBJC_$_CATEGORY_INSTANCE_METHODS_Sark_$_GayExtention`\n\n其中`_I_Sark_GayExtention_burst`符号就代表了category里面的`- burst`方法，同样遵循了一定的命名规范，里面的`I`表示实例方法\n\n最后，这个类的category们生成了一个数组，存在了`__DATA`段下的`__objc_catlist`section里\n``` c\nstatic struct _category_t *L_OBJC_LABEL_CATEGORY_$ [1] __attribute__((used, section (\"__DATA, __objc_catlist,regular,no_dead_strip\")))= {\n\t&_OBJC_$_CATEGORY_Sark_$_GayExtention,\n};\n```\n至此编译器的任务完成了。\n\n###runtime，我的category哪儿去了？\n\n我们知道，category动态扩展了原来类的方法，在调用者看来好像原来类本来就有这些方法似的，有两个事实：\n\n 1. 不论有没有import category 的`.h`，都可以成功调用category的方法，都影响不到category的加载流程，import只是帮助了编译检查和链接过程\n 2. runtime加载完成后，category的**原始信息**在**类结构里**将不会存在\n\n\n这需要探究下**runtime对category的加载过程**，这里就简单说一下\n\n 1. objc runtime的加载入口是一个叫`_objc_init`的方法，在library加载前由libSystem dyld调用，进行初始化操作\n 2. 调用`map_images`方法将文件中的`image`map到内存\n 3. 调用`_read_images`方法初始化map后的`image`，这里面干了很多的事情，像load所有的类、协议和**category**，著名的`+ load`方法就是这一步调用的\n 4. 仔细看category的初始化，循环调用了`_getObjc2CategoryList`方法，这个方法拿出来看看：\n 5. ... \n\n\n``` objc\n#define GETSECT(name, type, sectname)                                   \\\n    type *name(const header_info *hi, size_t *outCount)  \\\n    {                                                                   \\\n        unsigned long byteCount = 0;                                    \\\n        type *data = (type *)                                           \\\n            getsectiondata(hi->mhdr, SEG_DATA, sectname, &byteCount);   \\\n        *outCount = byteCount / sizeof(type);                           \\\n        return data;                                                    \\\n    }\n    \n// ... //\n\nGETSECT(_getObjc2CategoryList, category_t *, \"__objc_catlist\");\n```\n眼熟的`__objc_catlist`，就是上面category存放的数据段了，可以串连起来了\n\n在调用完`_getObjc2CategoryList`后，runtime终于开始了**category的处理**，简化的代码如下\n``` objc\n// Process this category. \n// First, register the category with its target class. \n// Then, rebuild the class's method lists (etc) if \n// the class is realized. \nBOOL classExists = NO;\nif (cat->instanceMethods ||  cat->protocols  ||  cat->instanceProperties) \n{\n    addUnattachedCategoryForClass(cat, cls, hi);\n    if (isRealized(cls)) {\n        remethodizeClass(cls);\n        classExists = YES;\n    }\n}\n\nif (cat->classMethods  ||  cat->protocols ) \n{\n    addUnattachedCategoryForClass(cat, cls->isa, hi);\n    if (isRealized(cls->isa)) {\n        remethodizeClass(cls->isa);\n    }\n}\n```\n首先分成两拨，一拨是实例对象相关的调用`addUnattachedCategoryForClass`，一拨是类对象相关的调用`addUnattachedCategoryForClass`，然后会调到`attachCategoryMethods`方法，这个方法把一个类所有的category_list的所有方法取出来组成一个`method_list_t **`，注意，这里是`倒序`添加的，也就是说，新生成的category的方法会先于旧的category的方法插入\n```\nstatic void \nattachCategoryMethods(class_t *cls, category_list *cats, \n                      BOOL *inoutVtablesAffected)\n{\n    if (!cats) return;\n    if (PrintReplacedMethods) printReplacements(cls, cats);\n\n    BOOL isMeta = isMetaClass(cls);\n    method_list_t **mlists = (method_list_t **)\n        _malloc_internal(cats->count * sizeof(*mlists));\n\n    // Count backwards through cats to get newest categories first\n    int mcount = 0;\n    int i = cats->count;\n    BOOL fromBundle = NO;\n    while (i--) {\n        method_list_t *mlist = cat_method_list(cats->list[i].cat, isMeta);\n        if (mlist) {\n            mlists[mcount++] = mlist;\n            fromBundle |= cats->list[i].fromBundle;\n        }\n    }\n\n    attachMethodLists(cls, mlists, mcount, NO, fromBundle, inoutVtablesAffected);\n\n    _free_internal(mlists);\n\n}\n```\n生成了所有method的list之后，调用`attachMethodLists`将所有方法`前序`添加进类的方法的数组中，也就是说，如果原来类的方法是a,b,c，类别的方法是1,2,3，那么插入之后的方法将会是1,2,3,a,b,c，也就是说，原来类的方法被category的方法`覆盖`了，但被覆盖的方法确实还在那里。","mtime":1394013122000,"source":"_posts/objc_category_secret.md"}}}